# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- Lesson17_AzureDevOps

pool:
  vmImage: 'ubuntu-latest'

variables:
  buildConfiguration: 'Release'
  workingDir: 'NetCoreTraining'

steps:
- task: UseDotNet@2
  inputs:
    version: '3.1.x'

- task: UseDotNet@2
  inputs:
    version: '3.1.x'
    packageType: runtime

- task: DotNetCoreCLI@2
  displayName: Build
  inputs:
    command: build
    projects: '$(workingDir)/NetCoreTraining.sln'
    arguments: '--configuration $(buildConfiguration)'

- task: DotNetCoreCLI@2
  inputs:
    command: test
    projects: $(workingDir)/Training.Test/Training.Test.csproj
    arguments: -c $(BuildConfiguration) -- RunConfiguration.DisableAppDomain=true
  displayName: Run Test task

- script: dotnet test $(workingDir)/Training.Test/Training.Test.csproj --logger "trx;LogFileName=TestResults.trx" --logger "xunit;LogFileName=TestResults.xml" --results-directory ./BuildReports/UnitTests /p:CollectCoverage=true /p:CoverletOutput=BuildReports/Coverage/ /p:CoverletOutputFormat=cobertura /p:Exclude="[xunit.*]*"
  displayName: Run Tests

- task: DotNetCoreCLI@2
  inputs:
    command: custom
    custom: tool
    arguments: install --tool-path . dotnet-reportgenerator-globaltool
  displayName: Install ReportGenerator tool

- script: ./reportgenerator "-reports:$(Build.SourcesDirectory)/NetCoreTraining/Training.Test/BuildReports/Coverage/coverage.cobertura.xml" "-targetdir:BuildReports/Coverage/Reports" -reporttypes:"Cobertura"
  displayName: Create reports

- task: PublishCodeCoverageResults@1
  displayName: 'Publish code coverage'
  inputs:
    codeCoverageTool: Cobertura
    summaryFileLocation: $(Build.SourcesDirectory)/NetCoreTraining/Training.Test/BuildReports/Coverage/coverage.cobertura.xml  

- task: DotNetCoreCLI@2
  inputs:
    command: publish
    publishWebProjects: True
    arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)'
    zipAfterPublish: True

# this code takes all the files in $(Build.ArtifactStagingDirectory) and uploads them as an artifact of your build.
- task: PublishBuildArtifacts@1
  inputs:
    pathtoPublish: '$(Build.ArtifactStagingDirectory)' 
    artifactName: 'Java2NetSwagger'